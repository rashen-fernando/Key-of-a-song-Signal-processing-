# -*- coding: utf-8 -*-
"""key detector for client.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_bEjTSqVvrrdMtrE2oxdeJXH3N14TegS
"""

import numpy as np
import librosa
import librosa.display
import matplotlib.pyplot as plt



def NotesScore(Notes,max_index,scales):
  
  Scores=[]
  for i in max_index : 
    Notes_as_set = set(Notes)
    intersection = Notes_as_set.intersection(scales[i])
    NotesIntersectionScales = list(intersection)
    Notes = list(Notes)
    score = 0
    for j in range(len(NotesIntersectionScales)):
      score = score + 12- Notes.index(NotesIntersectionScales[j])
    Scores.append(score)
  return Scores  




path = input("enter path - ")
name = input("name - ")
y, sr = librosa.load(path)
S = np.abs(librosa.stft(y, n_fft=4096))**2
chroma = librosa.feature.chroma_stft(S=S, sr=sr)

x = np.sum( chroma,1)
index = np.linspace(1,12,12)
D = np.stack((index,x),1)
D=D[D[:,1].argsort()]


Notes = D[5:12,0]        #removing the least used 5 notes
#print(Notes,'\n')
scales = [[1,3,5,6,8,10,12],
          [2,4,6,7,9,11,1],
          [3,5,7,8,10,12,2],
          [4,6,8,9,11,1,3],
          [5,7,9,10,12,2,4],
          [6,8,10,11,1,3,5],
          [7,9,11,12,2,4,6],
          [8,10,12,1,3,5,7],
          [9,11,1,2,4,6,8],
          [10,12,2,3,5,7,9],
          [11,1,3,4,6,8,10],
          [12,2,4,5,7,9,11]]

matches  = []        
for i in range(12):         #finding the similar scale to the algorithmically obtained scale
  Notes_as_set = set(Notes)
  intersection = Notes_as_set.intersection(scales[i])
  NotesIntersectionScales = list(intersection)
  matches.append(len(NotesIntersectionScales))            #number of matches
  #print(NotesIntersectionScales)
  

keys = ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B']


max_value = max(matches)
max_index= np.where(np.array(matches)==max_value)

#print('\n',matches,'\n') 


score = NotesScore(Notes,max_index[0],scales)
max_score = max(score)
max_score_index =max_index[0][ ( np.where(np.array(score)==max_score) )[0] ]
KEY_of_the_SONG = np.array(keys)[max_score_index]
other = np.array(keys)[max_index]
#print(max_value)
#print(max_index[0])
#print(max_score_index)
print(name," = ",KEY_of_the_SONG)
print("other key suggestions - ",other )